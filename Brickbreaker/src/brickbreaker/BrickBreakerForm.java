package brickbreaker;

/**
 * Required imports
 */
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 * BrickBreakerForm.java - This form is the main game form it contains mostly
 * everything for the game, It contains ball, brick and paddle also the score
 * and the game should end when the score is 225.
 *
 * @author Abhishek Shah
 * @since Jan. 5, 2020
 */
public class BrickBreakerForm extends javax.swing.JFrame {

    /**
     * Creates new form BrickBreakerForm
     */
    public BrickBreakerForm() {
        initComponents();
        start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPaddle = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        leftCurb = new javax.swing.JLabel();
        rightCurb = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        lblBall = new javax.swing.JLabel();
        topWall = new javax.swing.JLabel();
        bottomWall = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        lblGameOver = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        lblEnter = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(null);

        lblPaddle.setBackground(new java.awt.Color(255, 255, 255));
        lblPaddle.setOpaque(true);
        getContentPane().add(lblPaddle);
        lblPaddle.setBounds(230, 474, 120, 20);

        lblScore.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblScore.setForeground(new java.awt.Color(0, 0, 204));
        lblScore.setText("Score:");
        getContentPane().add(lblScore);
        lblScore.setBounds(490, 0, 140, 20);

        leftCurb.setBackground(new java.awt.Color(255, 255, 0));
        leftCurb.setOpaque(true);
        getContentPane().add(leftCurb);
        leftCurb.setBounds(0, 0, 24, 545);

        rightCurb.setBackground(new java.awt.Color(255, 255, 0));
        rightCurb.setOpaque(true);
        getContentPane().add(rightCurb);
        rightCurb.setBounds(591, 0, 24, 545);

        jLabel1.setBackground(new java.awt.Color(255, 0, 0));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(50, 30, 50, 30);

        jLabel2.setBackground(new java.awt.Color(255, 0, 0));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(110, 30, 50, 30);

        jLabel3.setBackground(new java.awt.Color(255, 0, 0));
        jLabel3.setOpaque(true);
        getContentPane().add(jLabel3);
        jLabel3.setBounds(170, 30, 50, 30);

        jLabel4.setBackground(new java.awt.Color(255, 0, 0));
        jLabel4.setOpaque(true);
        getContentPane().add(jLabel4);
        jLabel4.setBounds(230, 30, 50, 30);

        jLabel6.setBackground(new java.awt.Color(255, 0, 0));
        jLabel6.setOpaque(true);
        getContentPane().add(jLabel6);
        jLabel6.setBounds(350, 30, 50, 30);

        jLabel7.setBackground(new java.awt.Color(255, 0, 0));
        jLabel7.setOpaque(true);
        getContentPane().add(jLabel7);
        jLabel7.setBounds(410, 30, 50, 30);

        jLabel9.setBackground(new java.awt.Color(255, 0, 0));
        jLabel9.setOpaque(true);
        getContentPane().add(jLabel9);
        jLabel9.setBounds(530, 30, 50, 30);

        jLabel5.setBackground(new java.awt.Color(255, 0, 0));
        jLabel5.setOpaque(true);
        getContentPane().add(jLabel5);
        jLabel5.setBounds(290, 30, 50, 30);

        jLabel10.setBackground(new java.awt.Color(51, 255, 0));
        jLabel10.setOpaque(true);
        getContentPane().add(jLabel10);
        jLabel10.setBounds(50, 70, 50, 30);

        jLabel11.setBackground(new java.awt.Color(51, 255, 0));
        jLabel11.setOpaque(true);
        getContentPane().add(jLabel11);
        jLabel11.setBounds(110, 70, 50, 30);

        jLabel12.setBackground(new java.awt.Color(51, 255, 0));
        jLabel12.setOpaque(true);
        getContentPane().add(jLabel12);
        jLabel12.setBounds(170, 70, 50, 30);

        jLabel13.setBackground(new java.awt.Color(51, 255, 0));
        jLabel13.setOpaque(true);
        getContentPane().add(jLabel13);
        jLabel13.setBounds(230, 70, 50, 30);

        jLabel14.setBackground(new java.awt.Color(51, 255, 0));
        jLabel14.setOpaque(true);
        getContentPane().add(jLabel14);
        jLabel14.setBounds(290, 70, 50, 30);

        jLabel15.setBackground(new java.awt.Color(51, 255, 0));
        jLabel15.setOpaque(true);
        getContentPane().add(jLabel15);
        jLabel15.setBounds(350, 70, 50, 30);

        jLabel16.setBackground(new java.awt.Color(51, 255, 0));
        jLabel16.setOpaque(true);
        getContentPane().add(jLabel16);
        jLabel16.setBounds(410, 70, 50, 30);

        jLabel18.setBackground(new java.awt.Color(51, 255, 0));
        jLabel18.setOpaque(true);
        getContentPane().add(jLabel18);
        jLabel18.setBounds(530, 70, 50, 30);

        jLabel19.setBackground(new java.awt.Color(51, 0, 255));
        jLabel19.setOpaque(true);
        getContentPane().add(jLabel19);
        jLabel19.setBounds(50, 110, 50, 30);

        jLabel20.setBackground(new java.awt.Color(51, 0, 255));
        jLabel20.setOpaque(true);
        getContentPane().add(jLabel20);
        jLabel20.setBounds(110, 110, 50, 30);

        jLabel21.setBackground(new java.awt.Color(51, 0, 255));
        jLabel21.setOpaque(true);
        getContentPane().add(jLabel21);
        jLabel21.setBounds(170, 110, 50, 30);

        jLabel22.setBackground(new java.awt.Color(51, 0, 255));
        jLabel22.setOpaque(true);
        getContentPane().add(jLabel22);
        jLabel22.setBounds(230, 110, 50, 30);

        jLabel23.setBackground(new java.awt.Color(51, 0, 255));
        jLabel23.setOpaque(true);
        getContentPane().add(jLabel23);
        jLabel23.setBounds(290, 110, 50, 30);

        jLabel24.setBackground(new java.awt.Color(51, 0, 255));
        jLabel24.setOpaque(true);
        getContentPane().add(jLabel24);
        jLabel24.setBounds(350, 110, 50, 30);

        jLabel25.setBackground(new java.awt.Color(51, 0, 255));
        jLabel25.setOpaque(true);
        getContentPane().add(jLabel25);
        jLabel25.setBounds(410, 110, 50, 30);

        jLabel27.setBackground(new java.awt.Color(51, 0, 255));
        jLabel27.setOpaque(true);
        getContentPane().add(jLabel27);
        jLabel27.setBounds(530, 110, 50, 30);

        jLabel36.setBackground(new java.awt.Color(204, 0, 204));
        jLabel36.setOpaque(true);
        getContentPane().add(jLabel36);
        jLabel36.setBounds(530, 150, 50, 30);

        jLabel28.setBackground(new java.awt.Color(204, 0, 204));
        jLabel28.setOpaque(true);
        getContentPane().add(jLabel28);
        jLabel28.setBounds(50, 150, 50, 30);

        jLabel29.setBackground(new java.awt.Color(204, 0, 204));
        jLabel29.setOpaque(true);
        getContentPane().add(jLabel29);
        jLabel29.setBounds(110, 150, 50, 30);

        jLabel30.setBackground(new java.awt.Color(204, 0, 204));
        jLabel30.setOpaque(true);
        getContentPane().add(jLabel30);
        jLabel30.setBounds(170, 150, 50, 30);

        jLabel31.setBackground(new java.awt.Color(204, 0, 204));
        jLabel31.setOpaque(true);
        getContentPane().add(jLabel31);
        jLabel31.setBounds(230, 150, 50, 30);

        jLabel32.setBackground(new java.awt.Color(204, 0, 204));
        jLabel32.setOpaque(true);
        getContentPane().add(jLabel32);
        jLabel32.setBounds(290, 150, 50, 30);

        jLabel33.setBackground(new java.awt.Color(204, 0, 204));
        jLabel33.setOpaque(true);
        getContentPane().add(jLabel33);
        jLabel33.setBounds(350, 150, 50, 30);

        jLabel34.setBackground(new java.awt.Color(204, 0, 204));
        jLabel34.setOpaque(true);
        getContentPane().add(jLabel34);
        jLabel34.setBounds(410, 150, 50, 30);

        lblBall.setBackground(new java.awt.Color(51, 255, 51));
        lblBall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/brickbreaker/Webp.net-resizeimage.png"))); // NOI18N
        getContentPane().add(lblBall);
        lblBall.setBounds(290, 260, 20, 20);

        topWall.setBackground(new java.awt.Color(255, 255, 0));
        topWall.setOpaque(true);
        getContentPane().add(topWall);
        topWall.setBounds(0, -10, 610, 30);

        bottomWall.setBackground(new java.awt.Color(255, 255, 0));
        bottomWall.setOpaque(true);
        getContentPane().add(bottomWall);
        bottomWall.setBounds(0, 515, 610, 30);

        jLabel8.setBackground(new java.awt.Color(255, 0, 0));
        jLabel8.setOpaque(true);
        getContentPane().add(jLabel8);
        jLabel8.setBounds(470, 30, 50, 30);

        jLabel17.setBackground(new java.awt.Color(51, 255, 0));
        jLabel17.setOpaque(true);
        getContentPane().add(jLabel17);
        jLabel17.setBounds(470, 70, 50, 30);

        jLabel26.setBackground(new java.awt.Color(51, 0, 255));
        jLabel26.setOpaque(true);
        getContentPane().add(jLabel26);
        jLabel26.setBounds(470, 110, 50, 30);

        jLabel35.setBackground(new java.awt.Color(204, 0, 204));
        jLabel35.setOpaque(true);
        getContentPane().add(jLabel35);
        jLabel35.setBounds(470, 150, 50, 30);

        lblGameOver.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        lblGameOver.setForeground(new java.awt.Color(255, 255, 0));
        lblGameOver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGameOver.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(lblGameOver);
        lblGameOver.setBounds(20, 260, 570, 50);

        jLabel37.setBackground(new java.awt.Color(255, 255, 0));
        jLabel37.setOpaque(true);
        getContentPane().add(jLabel37);
        jLabel37.setBounds(50, 190, 50, 30);

        jLabel45.setBackground(new java.awt.Color(255, 255, 0));
        jLabel45.setOpaque(true);
        getContentPane().add(jLabel45);
        jLabel45.setBounds(530, 190, 50, 30);

        jLabel38.setBackground(new java.awt.Color(255, 255, 0));
        jLabel38.setOpaque(true);
        getContentPane().add(jLabel38);
        jLabel38.setBounds(110, 190, 50, 30);

        jLabel39.setBackground(new java.awt.Color(255, 255, 0));
        jLabel39.setOpaque(true);
        getContentPane().add(jLabel39);
        jLabel39.setBounds(170, 190, 50, 30);

        jLabel40.setBackground(new java.awt.Color(255, 255, 0));
        jLabel40.setOpaque(true);
        getContentPane().add(jLabel40);
        jLabel40.setBounds(230, 190, 50, 30);

        jLabel41.setBackground(new java.awt.Color(255, 255, 0));
        jLabel41.setOpaque(true);
        getContentPane().add(jLabel41);
        jLabel41.setBounds(290, 190, 50, 30);

        jLabel42.setBackground(new java.awt.Color(255, 255, 0));
        jLabel42.setOpaque(true);
        getContentPane().add(jLabel42);
        jLabel42.setBounds(350, 190, 50, 30);

        jLabel43.setBackground(new java.awt.Color(255, 255, 0));
        jLabel43.setOpaque(true);
        getContentPane().add(jLabel43);
        jLabel43.setBounds(410, 190, 50, 30);

        jLabel44.setBackground(new java.awt.Color(255, 255, 0));
        jLabel44.setOpaque(true);
        getContentPane().add(jLabel44);
        jLabel44.setBounds(470, 190, 50, 30);

        lblEnter.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        lblEnter.setForeground(new java.awt.Color(255, 255, 0));
        lblEnter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEnter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(lblEnter);
        lblEnter.setBounds(20, 330, 570, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        pressKey(evt);
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        releasedKey(evt);
    }//GEN-LAST:event_formKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bottomWall;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblBall;
    private javax.swing.JLabel lblEnter;
    private javax.swing.JLabel lblGameOver;
    private javax.swing.JLabel lblPaddle;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel leftCurb;
    private javax.swing.JLabel rightCurb;
    private javax.swing.JLabel topWall;
    // End of variables declaration//GEN-END:variables

    // Here are some global variables
    private Timer ballTimer;
    private Timer paddleTimer;

    private int ballDirection;
    private int ballX = 120;
    private int ballY = 350;
    private final int ballW = 20;
    private final int ballH = 20;

    private int paddleDirection;
    private final int LEFT = 0;
    private final int RIGHT = 1;
    private final int UP_LEFT = 1;
    private final int UP_RIGHT = 2;
    private final int DOWN_LEFT = 3;
    private final int DOWN_RIGHT = 4;

    private int score = 0;

    private final int TOTAL_BRICKS = 45;
    private final JLabel[] brickLabels = new JLabel[TOTAL_BRICKS];

    Rectangle ballHitbox;
    Rectangle paddleHitbox;
    Rectangle leftWallHitbox;
    Rectangle rightWallHitbox;
    Rectangle topWallHitbox;
    Rectangle bottomWallHitbox;

    /**
     * This method makes the form settings and make the bricks appear also
     * randomizes the ball direction
     */
    private void start() {

        // Ball starts with a random direction
        ballDirection = (int) ((4 - 1 + 1) * Math.random() + 1);
        // Making arrays of bricks at the start for loops
        brickLabels[0] = jLabel1;
        brickLabels[1] = jLabel2;
        brickLabels[2] = jLabel3;
        brickLabels[3] = jLabel4;
        brickLabels[4] = jLabel5;
        brickLabels[5] = jLabel6;
        brickLabels[6] = jLabel7;
        brickLabels[7] = jLabel8;
        brickLabels[8] = jLabel9;
        brickLabels[9] = jLabel10;
        brickLabels[10] = jLabel11;
        brickLabels[11] = jLabel12;
        brickLabels[12] = jLabel13;
        brickLabels[13] = jLabel14;
        brickLabels[14] = jLabel15;
        brickLabels[15] = jLabel16;
        brickLabels[16] = jLabel17;
        brickLabels[17] = jLabel18;
        brickLabels[18] = jLabel19;
        brickLabels[19] = jLabel20;
        brickLabels[20] = jLabel21;
        brickLabels[21] = jLabel22;
        brickLabels[22] = jLabel23;
        brickLabels[23] = jLabel24;
        brickLabels[24] = jLabel25;
        brickLabels[25] = jLabel26;
        brickLabels[26] = jLabel27;
        brickLabels[27] = jLabel28;
        brickLabels[28] = jLabel29;
        brickLabels[29] = jLabel30;
        brickLabels[30] = jLabel31;
        brickLabels[31] = jLabel32;
        brickLabels[32] = jLabel33;
        brickLabels[33] = jLabel34;
        brickLabels[34] = jLabel35;
        brickLabels[35] = jLabel36;
        brickLabels[36] = jLabel37;
        brickLabels[37] = jLabel38;
        brickLabels[38] = jLabel39;
        brickLabels[39] = jLabel40;
        brickLabels[40] = jLabel41;
        brickLabels[41] = jLabel42;
        brickLabels[42] = jLabel43;
        brickLabels[43] = jLabel44;
        brickLabels[44] = jLabel45;

        //Some settings for the form
        this.setTitle(Globals.APPLICATION_TITLE);
        this.setResizable(false);
        this.setSize(632, 581);
        this.setLocationRelativeTo(null);
        setTimers();
        this.setBackground(Color.black);
        this.getContentPane().setBackground(Color.black);
        this.setVisible(true);
    }

    /**
     * When the user presses a key on the keyboard
     *
     * @param eventthe keyboard event for the specific key
     */
    private void pressKey(KeyEvent event) {
        // Check which key was preseed        
        if (paddleTimer.isRunning() == false) {
            paddleTimer.start();
        }
        if (event.getKeyCode() == KeyEvent.VK_LEFT) {
            // Set to move left
            paddleDirection = LEFT;
        } else if (event.getKeyCode() == KeyEvent.VK_RIGHT) {
            // Set to move right
            paddleDirection = RIGHT;
        } else if (event.getKeyCode() == KeyEvent.VK_ENTER) {
            // If user presses an enter key the game restarts
            Restart();
        }
    }

    /**
     * This method gets the coordinates of the paddle also runs a check
     * collisions method in it with the ball and the side walls
     */
    private void paddleTick() {
        int x = lblPaddle.getX();
        int y = lblPaddle.getY();
        int w = lblPaddle.getWidth();
        int h = lblPaddle.getHeight();

        if (paddleDirection == LEFT) {
            x = x - Globals.PADDLE_AMOUNT;
        } else if (paddleDirection == RIGHT) {
            x = x + Globals.PADDLE_AMOUNT;
        }
        checkCollisions();
        lblPaddle.setBounds(x, y, w, h);
    }

    /**
     * This method randomizes the ball direction and also runs check collisions
     * method for the every brick, walls, and paddle
     */
    private void ballTick() {
        ballX = lblBall.getX();
        ballY = lblBall.getY();

        if (ballDirection == UP_LEFT) {
            ballX = ballX - Globals.BALL_AMOUNT;
            ballY = ballY - Globals.BALL_AMOUNT;
        } else if (ballDirection == UP_RIGHT) {
            ballX = ballX + Globals.BALL_AMOUNT;
            ballY = ballY - Globals.BALL_AMOUNT;
        } else if (ballDirection == DOWN_LEFT) {
            ballX = ballX - Globals.BALL_AMOUNT;
            ballY = ballY + Globals.BALL_AMOUNT;
        } else if (ballDirection == DOWN_RIGHT) {
            ballX = ballX + Globals.BALL_AMOUNT;
            ballY = ballY + Globals.BALL_AMOUNT;
        }
        checkCollisions();
        lblBall.setBounds(ballX, ballY, ballW, ballH);
    }

    /**
     * This method run different methods of collisions with objects
     */
    private void checkCollisions() {
        // get all hitboxes
        ballHitbox = getHitbox(lblBall);
        paddleHitbox = getHitbox(lblPaddle);
        leftWallHitbox = getHitbox(leftCurb);
        rightWallHitbox = getHitbox(rightCurb);
        topWallHitbox = getHitbox(topWall);
        bottomWallHitbox = getHitbox(bottomWall);
        checkPaddleWallsCollison();
        checkBallWallsCollisions();
        checkPaddleBallCollison();
        checkBallBricksCollsion();
    }

    /**
     * This method is for ball to brick collisions
     */
    private void checkBallBricksCollsion() {
        // Now check for any ball to brick collisions
        // loop through all bricks in the array
        for (int i = 0; i < brickLabels.length; i++) {
            // pull a brick label out of the array of brick labels
            JLabel brickLabel = brickLabels[i];
            // only worry about hits label if it is visible
            if (brickLabel.isVisible()) {
                // make a hitbox for that one brick label
                Rectangle brickHitbox = getHitbox(brickLabel);
                // check ball to brick collision
                if (ballHitbox.intersects(brickHitbox)) {
                    // make brick disappear
                    brickLabel.setVisible(false);
                    score = score + 5;
                    lblScore.setText("Score: " + score);
                    // now leave the loop and leave the method
                    return;
                }
            }
        }
    }

    /**
     * This method is for paddle to ball collisions
     */
    private void checkPaddleBallCollison() {
        // check if ball hits paddle
        if (ballHitbox.intersects(paddleHitbox)) {
            if (ballDirection == DOWN_LEFT) {
                ballDirection = UP_LEFT;
            } else if (ballDirection == DOWN_RIGHT) {
                ballDirection = UP_RIGHT;
            }
        }
    }

    /**
     * This method is for paddle to wall collisions
     */
    private void checkPaddleWallsCollison() {
        // check if paddle is hitting a wall
        if (paddleHitbox.intersects(leftWallHitbox)) {
            paddleDirection = RIGHT;
        } else if (paddleHitbox.intersects(rightWallHitbox)) {
            paddleDirection = LEFT;
        }
    }

    /**
     * This method is for ball to wall collisions
     */
    private void checkBallWallsCollisions() {
        // Now check for ball to any wall collisions
        if (ballHitbox.intersects(leftWallHitbox)) {
            if (ballDirection == UP_LEFT) {
                ballDirection = UP_RIGHT;
            } else if (ballDirection == DOWN_LEFT) {
                ballDirection = DOWN_RIGHT;
            }
        } else if (ballHitbox.intersects(rightWallHitbox)) {
            if (ballDirection == UP_RIGHT) {
                ballDirection = UP_LEFT;
            } else if (ballDirection == DOWN_RIGHT) {
                ballDirection = DOWN_LEFT;
            }
        } else if (ballHitbox.intersects(topWallHitbox)) {
            if (ballDirection == UP_LEFT) {
                ballDirection = DOWN_LEFT;
            } else if (ballDirection == UP_RIGHT) {
                ballDirection = DOWN_RIGHT;
            }
        } else if (ballHitbox.intersects(bottomWallHitbox)) {
            lblGameOver.setVisible(true);
            lblGameOver.setHorizontalAlignment((int) CENTER_ALIGNMENT);
            lblGameOver.setText("GAME OVER!,Your score was : " + score);

            lblEnter.setVisible(true);
            lblEnter.setHorizontalAlignment((int) CENTER_ALIGNMENT);
            lblEnter.setText(" Press (ENTER) to restart ");
        } else if (score == 225) {
            lblGameOver.setVisible(true);
            lblGameOver.setHorizontalAlignment((int) CENTER_ALIGNMENT);
            lblGameOver.setText("YOU WON!");
            
            paddleTimer.stop();
            ballTimer.stop();
            
            lblEnter.setVisible(true);
            lblEnter.setHorizontalAlignment((int) CENTER_ALIGNMENT);
            lblEnter.setText(" Press (ENTER) to restart ");
        }
    }

    /**
     * Gets a rectangle object from the passed label object to be used for
     * collision detection for any object
     *
     * @param labelthe label object to use
     * @return a rectangle object
     */
    private Rectangle getHitbox(JLabel label) {
        int x = label.getX();                   // Using built-in label methods
        int y = label.getY();
        int w = label.getWidth();
        int h = label.getHeight();
        Rectangle hitbox = new Rectangle(x, y, w, h); // creates rectangle
        return hitbox;
    }

    /**
     * This method is for the timers to start
     */
    private void setTimers() {
        //Some timers start
        paddleTimer = new Timer(Globals.PADDLE_SPEED, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                paddleTick();
            }
        });

        ballTimer = new Timer(Globals.BALL_SPEED, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ballTick();
            }
        });
        ballTimer.start();
    }

    /**
     * This method restarts the game
     */
    private void Restart() {
        BrickBreakerForm screen = new BrickBreakerForm();
    }

    /**
     * This method is for when the key is pressed then only it moves
     *
     * @param evt it controls how it moves when the keys are pressed
     */
    private void releasedKey(KeyEvent evt) {
        paddleTimer.stop();
    }
}
